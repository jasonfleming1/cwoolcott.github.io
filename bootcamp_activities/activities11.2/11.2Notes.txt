

--------- Constructing Programmers ------------- 

Constructing Programmers 
Slack out the following instructions...

Instructions

In this activity, we are going to create a constructor function called "Programmer" which can be used to create objects containing information on various programmers.

Your "Programmer" constructor should be able to take in the following information...

The programmer's name
Their position/job title
How old they are
Favorite programming language
Now create a method for the constructor that would print all of the information contained within an object to the console.

Finally, create a "Programmer" object and call the method to print its contents

--------- For loops and Callbacks ------------- 

For Loops do not wait for asynchronous operations to finish

The for loop runs immediately to completion while all your asynchronous operations are started. When they complete some time in the future and call their callbacks, the value of your loop index variable i will be at its last value for all the callbacks.

This is because the for loop does not wait for an asynchronous operation to complete before continuing on to the next iteration of the loop and because the async callbacks are called some time in the future. The loop completes its iterations and THEN the callbacks get called when those async operations finish. As such, the loop index is "done" and sitting at its final value for all the callbacks.

Bascially, You have to invoke the next prompt from the response callback of the previous one. A bit counter-intuitive for someone only use to synchronous programming, but this how do it in the async world

--------- Team Manager Part 1  ------------- 

Instructions

Over the course of this assignment you are going to put together a function which uses constructors and user input to create and manage a team of players.

Start out by creating a constructor function called "Player" with the following properties and methods...

name: Property which contains the player's name
position: Property which holds the player's position
offense: Property which is a value between 1 and 10 to show how good this player is on offense
defense: Property which is a value between 1 and 10 to show how good this player is on defense
goodGame: Method which increases either the player's offense or defense property based upon a coinflip.
badGame: Method which decreases either the player's offense or defense property based upon a coinflip.
printStats: Method which prints all of the player's properties to the screen

Now create a program which allows the user to create 3 unique players; 2 starters and a sub. It should take as user input the name, position, offense, and defense of each player.

Once all of the players have been created, print their stats.

HINT: Remember to use recursion when looping with inquirer! Otherwise your program might not return the prompts as you expect.


Position: Property which holds the player's position should only have these options!
Forward
Back
Striker
Goalkeeper

--------- Team Manager Part 2  ------------- 

Instructions

Once your code is functioning properly, move on to create a function called "playGame" which will be run after all of the players have been created and will do the following:

Run 5 times. Each time the function runs:
Two random numbers between 1 and 20 are rolled and compared against the starters' offensive and defensive stats
If the first number is lower than the sum of the team's offensive stat, add one point to the team's score.
If the second number is higher than the sum of the team's defensive stat, remove one point from the team's score.
After the score has been changed, prompt the user to allow them to substitute a player from within the starters array with the player from within the subs array.
After the game has finished (been run 5 times):
If the score is positive, run goodGame for all of the players currently within the starters array.
If the score is negative, run badGame for all of the players currently within the starters array.
If the score is equal to zero, do nothing with the starters.
Give the user a message about if they won, and the status of their starters.
After printing the results, ask the user if they would like to play again.
Run playGame from the start once more if they do.
End the program if they don't.

HINT: It has been a while since we have worked with random numbers explicitly. If you are having troubles, look up Math.random on Google and you should find some resources to help.


 Students Do: Filling Up Classrooms (15 Mins)
Answer any questions your students might have before slacking out the following instructions (10-Classrooms)...

--------- Students Do: Filling Up Classrooms  ------------- 

Instructions

In this activity we are going to make two constructors in two different files in which one constructor calls upon the other within it.

The first constructor function is called "Student" and has the following properties within it...

Name of the student
Favorite subject
Current GPA
The second constructor function is called "Class" and has the following properties within it...

An array of students within the class
Number of students in the class
Name of the professor
Room number
The Student constructor function from above which adds a new student to the class

BONUS: Make it so that that your application can take in user input to add new classes and new students to those classes.





